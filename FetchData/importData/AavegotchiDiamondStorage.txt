//Aavegotchi Diamond Storage

//https://github.com/aavegotchi/aavegotchi-contracts/blob/master/contracts/Aavegotchi/libraries/LibAppStorage.sol

// https://medium.com/aigang-network/how-to-read-ethereum-contract-storage-44252c8af925
// https://solidity-by-example.org/hacks/accessing-private-data/

//Use this code to grab the storage slots from the diamond contract
// const start = ethers.BigNumber.from("0x8d4C8559E07cF784B8912a306a2b9f3B3f34E92E");
// for (let index = 0; index < 100; ++index)
// {
// 	const slot = await provider.getStorageAt(contract.address, index);
// 	console.log(index, slot);
// }

0:  0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => AavegotchiCollateralTypeInfo) collateralTypeInfo;
1:  0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => uint256) collateralTypeIndexes;
2:  0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(bytes32 => SvgLayer[]) svgLayers;
3:  0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => mapping(uint256 => uint256))) nftItemBalances;
4:  0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => uint256[])) nftItems;
5:  0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => mapping(uint256 => uint256))) nftItemIndexes;
6:  0x0000000000000000000000000000000000000000000000000000000000000109 // ItemType[] itemTypes;
7:  0x000000000000000000000000000000000000000000000000000000000000007b // WearableSet[] wearableSets;
8:  0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => Haunt) haunts;
9:  0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => uint256)) ownerItemBalances;
10: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => uint256[]) ownerItems;
11: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => uint256)) ownerItemIndexes;
12: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => uint256) tokenIdToRandomNumber;
13: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => Aavegotchi) aavegotchis;
14: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => uint32[]) ownerTokenIds;
15: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => uint256)) ownerTokenIdIndexes;
16: 0x00000000000000000000000000000000000000000000000000000000000061a8 // uint32[] tokenIds;
17: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => uint256) tokenIdIndexes;
18: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(address => bool)) operators;
19: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => address) approved;
20: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(string => bool) aavegotchiNamesUsed;
21: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => uint256) metaNonces;
22: 0x00000000000000000000000000000000000000000000000000000002000061a8 // uint16 currentHauntId | uint32 tokenIdCounter
23: 0x41617665676f7463686900000000000000000000000000000000000000000014 // "Aavegotchi"
24: 0x474f54434849000000000000000000000000000000000000000000000000000c // "GOTCHI"
25: 0x0000000000000000000000000000000000000000000000000000000000000010 // address[] collateralTypes;
26: 0x000000000000000000000000385eeac5cb85a38a9a07a70c73e0a3271cfb54a7 // address ghstAddress
27: 0x000000000000000000000000a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aa // address childChainManager;
28: 0x000000000000000000000000a370f2add2a9fba8759147995d6a0641f8d7c119 // address gameManager;
29: 0x000000000000000000000000b208f8bb431f580cc4b216826affb128cd1431ab // address dao;
30: 0x000000000000000000000000b208f8bb431f580cc4b216826affb128cd1431ab // address daoTreasury;
31: 0x000000000000000000000000d4151c984e6cf33e04ffaaf06c3374b2926ecc64 // address pixelcraft
32: 0x00000000000000000000000027df5c6dcd360f372e23d5e63645ec0072d0c098 // address rarityFarming
33: 0x000000000000000000000000000000000000000000000000000000000000004d // string itemsBaseUri;
34: 0x676affa8db61e17b44e70a9486420a8f1153bf66009c8c05ff80bd64b2268078 // bytes32 domainSeparator;
35: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(bytes32 => uint256) vrfRequestIdToTokenId;
36: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(bytes32 => uint256) vrfNonces;
37: 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da // bytes32 keyHash;
38: 0x00000000000000000000000000000000000000000000000000005af3107a4000 // uint144 fee
39: 0x0000000000000000000000003d2341adb2d31f1c5530cdc622016af293177ae0 // address vrfCoordinator
40: 0x000000000000000000000000b0897686c545045afc77cf20ec7a532e3120e0f1 // ILink link
41: 0x00000000000000000000000000000000000000000000000000000000000399b7 // uint256 nextERC1155ListingId;
42: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => ERC1155Listing) erc1155Listings;
43: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => mapping(string => uint256)) erc1155ListingHead;
44: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(string => mapping(uint256 => ListingListItem)) erc1155ListingListItem;
45: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => mapping(string => uint256))) erc1155OwnerListingHead;
46: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(string => mapping(uint256 => ListingListItem)) erc1155OwnerListingListItem;
47: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => mapping(address => uint256))) erc1155TokenToListingId;
48: 0x000000000000000000000000000000000000000000000000016345785d8a0000 // uint256 listingFeeInWei;
49: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => uint256)) erc1155Categories;
50: 0x0000000000000000000000000000000000000000000000000000000000029cd9 // uint256 nextERC721ListingId;
51: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => ERC721Listing) erc721Listings;
52: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => ListingListItem) erc721ListingListItem;
53: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => mapping(string => uint256)) erc721ListingHead;
54: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => ListingListItem) erc721OwnerListingListItem;
55: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => mapping(string => uint256))) erc721OwnerListingHead;
56: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => uint256)) erc721Categories;
57: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(uint256 => mapping(address => uint256))) erc721TokenToListingId;
58: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => uint256) sleeves;
59: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => bool) itemManagers;
60: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => GameManager) gameManagers;
61: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => address[]) hauntCollateralTypes;
62: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => mapping(bytes => Dimensions)) sideViewDimensions;
63: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(address => mapping(address => bool)) petOperators; //Pet operators for a token
64: 0x0000000000000000000000000000000000000000000000000000000000000000 // mapping(uint256 => address) categoryToTokenAddress;


// https://medium.com/coinmonks/solidity-tutorial-all-about-mappings-29a12269ee14
// https://medium.com/coinmonks/a-practical-walkthrough-smart-contract-storage-d3383360ea1b

// Mappings are different from the simple types we have looked at so far. 
// When a mapping is declared, space is reserved for it sequentially like any other type, 
// but the actual values are stored in a different slot. 
// In order to find the slot you must take the sha3(keccak256) hash of the slot concatenated with the key.




